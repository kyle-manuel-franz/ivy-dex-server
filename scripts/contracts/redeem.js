#!/usr/bin/env node
/*
    This should output specific info about an address
*/
const yargs = require('yargs')
const blockfrost = require('../../src/lib/blockfrost')
const slib = require('@emurgo/cardano-serialization-lib-nodejs')
const { initializeMongoDbConnection } = require('../../src/lib/mongoose');
const orderDatumModel = require('../../src/data/orderDatum/model')
const { mkSerializedOrderDatum } = require('../../src/lib/ledger')
const _ = require('lodash')

const {
    createRootKeyFromEntropy,
    createAccountKeyFromRootKey,
    createPrivateKeyFromAccountKey,
    getSimpleBaseAddressForAccountKey,
    mkTxBuilder,
    mkTxInput,
    printTransactionOutputs,
    hashAndSignTx
} = require('../../src/lib/slib');


const options = yargs
    .option("d", {
        alias: "datum_hash",
        describe: "hash of datum",
        required: true
    })
    .options("k", {
        alias: "root-key",
        describe: "Root key (bech_32). Use this instead of the recovery file",
        required: false,
    })
    .argv;

(async () => {
    const db = await initializeMongoDbConnection()

    try{
        let rootKey
        if(options['recovery-file']){
            const data = fs.readFileSync(options['recovery-file'])
            const entropyString = data.toString().trim()
            const entropy = mnemonicToEntropy(entropyString)
            rootKey = createRootKeyFromEntropy(entropy)
        } else {
            rootKey = slib.Bip32PrivateKey.from_bech32(options['root-key'])
        }

        const accountKey = createAccountKeyFromRootKey(rootKey)
        const privateKey = createPrivateKeyFromAccountKey(accountKey)
        const baseAddress = getSimpleBaseAddressForAccountKey(accountKey)

        const pp = await blockfrost.fetchProtocolParameters()
        const txBuilder = mkTxBuilder(pp)

        const utxosAtAddress = await blockfrost.getUtxosForAddress(baseAddress.to_address().to_bech32())
        const txInputs = _.map(utxosAtAddress, u => mkTxInput(baseAddress.to_address().to_bech32(), u))

        for(let i = 0; i < txInputs.length; i++){
            txBuilder.add_input(txInputs[i][0], txInputs[i][1], txInputs[i][2])
        }

        const datum = await orderDatumModel.findOne({ datum_hash: options['datum_hash'] })

        const order_datum = mkSerializedOrderDatum(
            datum.odOwner,
            datum.odBook,
            datum.odBuyerTokenName,
            datum.odBuyerCurrencySymbol,
            datum.odBuyerTokenAmount.toString(),
            datum.odSellerTokenName,
            datum.odSellerCurrencySymbol,
            datum.odSellerTokenAmount.toString()
        )

        const cancelRedeemerData = slib.PlutusData.new_constr_plutus_data(
            slib.ConstrPlutusData.new(
                slib.BigNum.from_str("0"),
                slib.PlutusList.new()
            )
        )

        const redeemer = slib.Redeemer.new(
            slib.RedeemerTag.new_spend(),
            slib.BigNum.from_str("0"),
            cancelRedeemerData,
            slib.ExUnits.new(
                slib.BigNum.from_str("7000000"),
                slib.BigNum.from_str("3000000000")
            )
        )

        const redeemers = slib.Redeemers.new()
        redeemers.add(redeemer)

        const transactionWitnessSet = slib.TransactionWitnessSet.new()
        transactionWitnessSet.set_redeemers(redeemers)

        const plutus_data = slib.PlutusList.new()
        plutus_data.add(order_datum)
        transactionWitnessSet.set_plutus_data(plutus_data)

        const scripts = slib.PlutusScripts.new()
        scripts.add(slib.PlutusScript.new(Buffer.from('590f23590f20010000332332233322233223332223322323233322232333222323333333322222222323332223233332222323233223233322232323233223322323233333222223322332233223322332233222232323232232232325335303333300b3333573466e1cd55cea804a4000466660a06eb8d5d0a8049bae35742a010666aa04aeb94090d5d0a803999aa812bae5024357426ae89401c8d4124d4c128cd5ce2481035054310004b499263333573466e1d40112002204e23333573466e1d40152000204e23504a35304b335738921035054310004c49926498cccd5cd19b8735573aa004900011980719191919191919191919191999ab9a3370e6aae75402920002333333333301c33502a232323333573466e1cd55cea8012400046604460746ae854008c0bcd5d09aba2500223505935305a3357389201035054310005b49926135573ca00226ea8004d5d0a80519a8150159aba150093335503175ca0606ae854020ccd540c5d728181aba1500733502a04335742a00c66a05466aa0a8098eb4d5d0a8029919191999ab9a3370e6aae754009200023350243232323333573466e1cd55cea80124000466a05866a084eb4d5d0a80118239aba135744a00446a0ba6a60bc66ae712401035054310005f49926135573ca00226ea8004d5d0a8011919191999ab9a3370e6aae7540092000233502a33504275a6ae854008c11cd5d09aba2500223505d35305e3357389201035054310005f49926135573ca00226ea8004d5d09aba2500223505935305a3357389201035054310005b49926135573ca00226ea8004d5d0a80219a8153ae35742a00666a05466aa0a8eb88004d5d0a801181c9aba135744a00446a0aa6a60ac66ae71241035054310005749926135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a8011919191999ab9a3370ea002900311810981d9aba135573ca00646666ae68cdc3a8012400846040608a6ae84d55cf280211999ab9a3370ea00690011181018181aba135573ca00a46666ae68cdc3a80224000460466eb8d5d09aab9e50062350503530513357389201035054310005249926499264984d55cea80089baa001357426ae8940088d4124d4c128cd5ce249035054310004b49926104a1350483530493357389201035054350004a4984d55cf280089baa001135573a6ea80044d5d1280089aba25001135573ca00226ea80048848cc00400c0088004888888888848cccccccccc00402c02802402001c01801401000c00880048848cc00400c008800448848cc00400c0084800448848cc00400c0084800448848cc00400c00848004848888c010014848888c00c014848888c008014848888c004014800448c88c008dd6000990009aa81c911999aab9f00125039233503830043574200460066ae880080c08c8c8c8cccd5cd19b8735573aa006900011998039919191999ab9a3370e6aae754009200023300d302e35742a00466a0200546ae84d5d1280111a8199a981a19ab9c491035054310003549926135573ca00226ea8004d5d0a801999aa805bae500a35742a00466a018eb8d5d09aba2500223502f353030335738921035054310003149926135744a00226aae7940044dd50009110919980080200180110009109198008018011000899aa800bae75a224464460046eac004c8004d540cc88c8cccd55cf8011281a119a81999aa81b18031aab9d5002300535573ca00460086ae8800c0ac4d5d080089119191999ab9a3370ea002900011a80418029aba135573ca00646666ae68cdc3a801240044a01046a0526a605466ae71241035054310002b499264984d55cea80089baa001121223002003112200112001232323333573466e1cd55cea8012400046600c600e6ae854008dd69aba135744a00446a0466a604866ae71241035054310002549926135573ca00226ea80048848cc00400c00880048c8cccd5cd19b8735573aa002900011bae357426aae7940088d407cd4c080cd5ce24810350543100021499261375400224464646666ae68cdc3a800a40084a00e46666ae68cdc3a8012400446a014600c6ae84d55cf280211999ab9a3370ea00690001280511a8111a981199ab9c490103505431000244992649926135573aa00226ea8004484888c00c0104488800844888004480048c8cccd5cd19b8750014800880188cccd5cd19b8750024800080188d4068d4c06ccd5ce249035054310001c499264984d55ce9baa0011220021220012001232323232323333573466e1d4005200c200b23333573466e1d4009200a200d23333573466e1d400d200823300b375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c46601a6eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc048c050d5d0a8049bae357426ae8940248cccd5cd19b875006480088c050c054d5d09aab9e500b23333573466e1d401d2000230133016357426aae7940308d407cd4c080cd5ce2481035054310002149926499264992649926135573aa00826aae79400c4d55cf280109aab9e500113754002424444444600e01044244444446600c012010424444444600a010244444440082444444400644244444446600401201044244444446600201201040024646464646666ae68cdc3a800a400446660106eb4d5d0a8021bad35742a0066eb4d5d09aba2500323333573466e1d400920002300a300b357426aae7940188d4040d4c044cd5ce2490350543100012499264984d55cea80189aba25001135573ca00226ea80048488c00800c888488ccc00401401000c80048c8c8cccd5cd19b875001480088c018dd71aba135573ca00646666ae68cdc3a80124000460106eb8d5d09aab9e500423500a35300b3357389201035054310000c499264984d55cea80089baa001212230020032122300100320011122232323333573466e1cd55cea80124000466aa026600c6ae854008c014d5d09aba25002235007353008335738921035054310000949926135573ca00226ea80044984800480044880084880048004888848cccc00401401000c00880044488008488488cc00401000c48004448848cc00400c008448004448c8c00400488cc00cc008008004cc8ccc888c8c8c8cc88ccc888c8c8cccc8888c8cc88cc88c8c8c8cc88cc88ccc888ccc888ccc888cccccccc88888888cc88ccccc88888cccc8888cc88cc88cc88ccc888cc88cc88cc88cc88cc88cc88c8c8c88888c8d4c0e801494cd4c0e001054cd4c154cc88d4c04000888888888894cd4d4088ccd54c16048004cd4174894cd4d40900088400c4005408c94cd4c188ccd5cd19b8f00c00106406313502500115024003210641062500235303d00522220041057133573892011b4f6e6c79206f776e65722063616e2063616e63656c206f726465720005615335305553353055333573466e1cccc888c8c8c004014c8004d5417088cd4d414c0052000223535504c002225335305f333573466e3c0080241841804c01c0044c01800cc8004d5416c88cd4d41480052000223535504b002225335305e333573466e3c00801c18017c40044c01800cccd54c1184800540fd413ccc01cd4c0f4014888800d400922010048810048282700415c158415c4cd5ce2492246656520636f6c6c6563746f7220736372697074206d75737420676574207061696400056153353055332233355304e120013500b500a23535504700122333553051120013500e500d23535504a00122333535504f00123305d4800000488cc1780080048cc17400520000013304200200133355304612001503f504f3300735303d0052222004500235303d005222200110571335738921224f776e6572206d757374206765742074686520746f6b656e7320616e642066656573000561056135300a0012200222353009001222222222233355304b120012235301900222235301e003223353041002253353062333573466e3c05000419018c4cd416c01401c401c801d41500244cd400c894cd4c13c0084004414013c48cd412488ccd4d401000c88008008004d4d40080048800448848cc00400c008480048848cc00400c0088004888888888848cccccccccc00402c02802402001c01801401000c00880048848cc00400c008800488848ccc00401000c00880048848cc00400c008800448488c00800c44880044800448848cc00400c0084800448848cc00400c0084800448848cc00400c00848004484888c00c010448880084488800448004848888c010014848888c00c014848888c008014848888c00401480048848cc00400c0088004848888888c01c0208848888888cc018024020848888888c014020488888880104888888800c8848888888cc0080240208848888888cc00402402080048488c00800c888488ccc00401401000c80048488c00800c8488c00400c80044880084880048004848c0040088004888848cccc00401401000c0088004488cd54c038480048d4d5402000488cd5402c008cd54c044480048d4d5402c00488cd54038008ccd4d540400048cc0752000001223301e00200123301d00148000004cc00c00800488cd54c034480048d4d5401c00488cd54028008ccd4d540300048cd54c044480048d4d5402c00488cd54038008d5404c00400488ccd5540200640080048cd54c044480048d4d5402c00488cd54038008d54044004004ccd55400c050008004444888ccd54c020480054040cd54c034480048d4d5401c00488cd54028008d5403c004ccd54c0204800488d4d54020008894cd4c06cccd54c04848004c8cd406088ccd4d402c00c88008008004d4d402400488004cd4024894cd4c074008407c40040708d4d5402c00488cc028008014018400c4cd405001000d4044004cd54c034480048d4d5401c00488c8cd5402c00cc004014c8004d54074894cd4d40500044d5403c00c884d4d54034008894cd4c080cc0300080204cd5405001c0044c01800c00848848cc00400c00848004448848cc00400c008448004c8004d5404888448894cd4d40300044008884cc014008ccd54c01c480040140100044484888c00c01044884888cc0080140104484888c004010448004c8004d540348844894cd4d401800454020884cd4024c010008cd54c01848004010004c8004d5403088448894cd4d40180044d4d402400c88004884ccd4d402c01488008c010008ccd54c01c480040140100044488008488488cc00401000c4800448848cc00400c0084800488ccd5cd19b8f002001007006223370000400244666ae68cdc38010008028020910010910009000889191800800911980198010010009991180124505302e302e31002123001002200101', 'hex')))
        transactionWitnessSet.set_plutus_scripts(scripts)

        const utxosAtScript = await blockfrost.getUtxosForAddress('addr_test1wr5j433ln36fgel99wdyre78degkmkwjr9sutfl0se382lgtcllce')
        console.log(utxosAtScript)
    } catch (e){
        console.error(e)
    }
    db.close()
})();